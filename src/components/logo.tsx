/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Border: THREE.Mesh;
    Text: THREE.Mesh;
  };
  materials: never;
};

export function Logo(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/AquatopiaLogo.glb") as GLTFResult;
  const groupRef = useRef<THREE.Group>(null);
  const { pointer } = useThree();

  // Track mouse position and smoothly rotate the logo
  useFrame(() => {
    if (!groupRef.current) return;

    // Calculate tilt based on mouse position (-1 to 1 range)
    const targetRotationX = Math.PI / 2 - pointer.y * 0.4; // Base rotation + tilt
    const targetRotationY = -pointer.x * 0.02;
    const targetRotationZ = -pointer.x * 0.15;

    // Smooth interpolation
    groupRef.current.rotation.x = THREE.MathUtils.lerp(
      groupRef.current.rotation.x,
      targetRotationX,
      0.1,
    );
    groupRef.current.rotation.y = THREE.MathUtils.lerp(
      groupRef.current.rotation.y,
      targetRotationY,
      0.1,
    );
    groupRef.current.rotation.z = THREE.MathUtils.lerp(
      groupRef.current.rotation.z,
      targetRotationZ,
      0.1,
    );
  });

  return (
    <group
      ref={groupRef}
      {...props}
      dispose={null}
      scale={8}
      rotation={[Math.PI / 2, 0, 0]}
    >
      <mesh castShadow receiveShadow geometry={nodes.Border.geometry}>
        <meshStandardMaterial color="#0A6BB4" roughness={0.5} />
      </mesh>
      <mesh castShadow receiveShadow geometry={nodes.Text.geometry}>
        {/* TODO make this a gradient? */}
        <meshStandardMaterial
          color="#49D1F1"
          roughness={0.5}
          emissive={"#49D1F1"}
          emissiveIntensity={0.3}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/AquatopiaLogo.glb");
